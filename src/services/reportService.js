import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'

class ReportService {
  constructor() {
    this.doc = null
  }

  async generateFlightReport(flightData, analysisData, visualizationElement) {
    this.doc = new jsPDF('p', 'mm', 'a4')
    
    // Add title page
    this.addTitlePage(flightData)
    
    // Add executive summary
    this.addExecutiveSummary(flightData, analysisData)
    
    // Add flight metrics
    this.addFlightMetrics(flightData, analysisData)
    
    // Add safety analysis
    this.addSafetyAnalysis(analysisData)
    
    // Add anomaly analysis
    this.addAnomalyAnalysis(analysisData)
    
    // Add recommendations
    this.addRecommendations(analysisData)
    
    // Add visualization if provided
    if (visualizationElement) {
      await this.addVisualization(visualizationElement)
    }
    
    // Add technical appendix
    this.addTechnicalAppendix(flightData)
    
    return this.doc
  }

  addTitlePage(flightData) {
    const pageWidth = this.doc.internal.pageSize.getWidth()
    const pageHeight = this.doc.internal.pageSize.getHeight()
    
    // Header
    this.doc.setFontSize(24)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('UAV Flight Analysis Report', pageWidth / 2, 40, { align: 'center' })
    
    // Flight ID
    this.doc.setFontSize(14)
    this.doc.setFont('helvetica', 'normal')
    this.doc.text(`Flight ID: ${flightData.flight_id}`, pageWidth / 2, 60, { align: 'center' })
    
    // Date
    const date = new Date().toLocaleDateString()
    this.doc.text(`Generated: ${date}`, pageWidth / 2, 70, { align: 'center' })
    
    // Summary box
    this.doc.setDrawColor(0, 123, 255)
    this.doc.setFillColor(240, 248, 255)
    this.doc.rect(20, 90, pageWidth - 40, 80, 'FD')
    
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Flight Summary', 30, 105)
    
    this.doc.setFont('helvetica', 'normal')
    const summary = [
      `Duration: ${flightData.summary.duration?.toFixed(1)}s`,
      `Max Altitude: ${flightData.summary.max_altitude?.toFixed(1)}m`,
      `Max Speed: ${flightData.summary.max_speed?.toFixed(1)}m/s`,
      `Battery Usage: ${flightData.summary.battery_usage?.toFixed(1)}%`,
      `Total Messages: ${flightData.summary.total_messages || 'N/A'}`
    ]
    
    let yPos = 115
    summary.forEach(line => {
      this.doc.text(line, 30, yPos)
      yPos += 10
    })
    
    // Footer
    this.doc.setFontSize(10)
    this.doc.text('Generated by UAV Log Viewer - Arena AI Challenge', pageWidth / 2, pageHeight - 20, { align: 'center' })
  }

  addExecutiveSummary(flightData, analysisData) {
    this.doc.addPage()
    
    this.doc.setFontSize(18)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Executive Summary', 20, 30)
    
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'normal')
    
    // Safety Score
    const safetyScore = analysisData.safetyScore || 0
    let safetyStatus = 'CRITICAL'
    if (safetyScore >= 80) safetyStatus = 'EXCELLENT'
    else if (safetyScore >= 60) safetyStatus = 'GOOD'
    else if (safetyScore >= 40) safetyStatus = 'WARNING'
    
    this.doc.text(`Flight Safety Score: ${safetyScore}/100 (${safetyStatus})`, 20, 50)
    
    // Key findings
    const findings = [
      `Total anomalies detected: ${analysisData.anomalies?.length || 0}`,
      `Critical issues: ${analysisData.anomalies?.filter(a => a.severity === 'critical').length || 0}`,
      `Flight completed successfully: ${safetyScore > 40 ? 'YES' : 'NO'}`,
      `Maintenance recommended: ${safetyScore < 60 ? 'YES' : 'NO'}`
    ]
    
    let yPos = 70
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Key Findings:', 20, yPos)
    yPos += 10
    
    this.doc.setFont('helvetica', 'normal')
    findings.forEach(finding => {
      this.doc.text(`• ${finding}`, 25, yPos)
      yPos += 8
    })
    
    // Recommendations summary
    yPos += 10
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Primary Recommendations:', 20, yPos)
    yPos += 10
    
    this.doc.setFont('helvetica', 'normal')
    const topRecommendations = analysisData.recommendations?.slice(0, 3) || []
    topRecommendations.forEach(rec => {
      this.doc.text(`• ${rec.title}: ${rec.description}`, 25, yPos)
      yPos += 8
    })
  }

  addFlightMetrics(flightData, analysisData) {
    this.doc.addPage()
    
    this.doc.setFontSize(18)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Flight Metrics', 20, 30)
    
    // Create metrics table
    const metrics = [
      ['Metric', 'Value', 'Status'],
      ['Flight Duration', `${flightData.summary.duration?.toFixed(1)}s`, 'Normal'],
      ['Maximum Altitude', `${flightData.summary.max_altitude?.toFixed(1)}m`, 'Normal'],
      ['Maximum Speed', `${flightData.summary.max_speed?.toFixed(1)}m/s`, 'Normal'],
      ['Battery Usage', `${flightData.summary.battery_usage?.toFixed(1)}%`, flightData.summary.battery_usage > 80 ? 'High' : 'Normal'],
      ['GPS Points', `${flightData.telemetry?.gps?.length || 0}`, 'Good'],
      ['Message Count', `${flightData.summary.total_messages || 'N/A'}`, 'Normal']
    ]
    
    this.addTable(metrics, 20, 50)
    
    // Add trend analysis if available
    let yPos = 140
    this.doc.setFontSize(14)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Trend Analysis', 20, yPos)
    yPos += 15
    
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'normal')
    
    const trends = [
      'Flight performance compared to historical data',
      'Battery efficiency trends',
      'GPS signal quality assessment',
      'Flight stability metrics'
    ]
    
    trends.forEach(trend => {
      this.doc.text(`• ${trend}`, 25, yPos)
      yPos += 8
    })
  }

  addSafetyAnalysis(analysisData) {
    this.doc.addPage()
    
    this.doc.setFontSize(18)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Safety Analysis', 20, 30)
    
    // Safety score breakdown
    const safetyBreakdown = [
      ['Category', 'Score', 'Max Score', 'Status'],
      ['GPS Stability', `${analysisData.gpsScore || 0}`, '25', this.getScoreStatus(analysisData.gpsScore || 0, 25)],
      ['Battery Health', `${analysisData.batteryScore || 0}`, '25', this.getScoreStatus(analysisData.batteryScore || 0, 25)],
      ['Flight Stability', `${analysisData.stabilityScore || 0}`, '25', this.getScoreStatus(analysisData.stabilityScore || 0, 25)],
      ['System Health', `${analysisData.systemScore || 0}`, '25', this.getScoreStatus(analysisData.systemScore || 0, 25)],
      ['Total Score', `${analysisData.safetyScore || 0}`, '100', this.getScoreStatus(analysisData.safetyScore || 0, 100)]
    ]
    
    this.addTable(safetyBreakdown, 20, 50)
    
    // Safety recommendations
    let yPos = 140
    this.doc.setFontSize(14)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Safety Recommendations', 20, yPos)
    yPos += 15
    
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'normal')
    
    const safetyRecs = [
      'Pre-flight inspection checklist completion',
      'Battery voltage monitoring during flight',
      'GPS signal strength verification',
      'Vibration dampening system check'
    ]
    
    safetyRecs.forEach(rec => {
      this.doc.text(`• ${rec}`, 25, yPos)
      yPos += 8
    })
  }

  addAnomalyAnalysis(analysisData) {
    this.doc.addPage()
    
    this.doc.setFontSize(18)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Anomaly Analysis', 20, 30)
    
    const anomalies = analysisData.anomalies || []
    
    if (anomalies.length === 0) {
      this.doc.setFontSize(12)
      this.doc.setFont('helvetica', 'normal')
      this.doc.text('No anomalies detected during this flight.', 20, 50)
      return
    }
    
    // Anomaly summary
    const criticalCount = anomalies.filter(a => a.severity === 'critical').length
    const warningCount = anomalies.filter(a => a.severity === 'warning').length
    const infoCount = anomalies.filter(a => a.severity === 'info').length
    
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'normal')
    this.doc.text(`Total Anomalies: ${anomalies.length}`, 20, 50)
    this.doc.text(`Critical: ${criticalCount} | Warning: ${warningCount} | Info: ${infoCount}`, 20, 60)
    
    // Detailed anomaly list
    let yPos = 80
    this.doc.setFontSize(14)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Detailed Anomaly List', 20, yPos)
    yPos += 15
    
    anomalies.forEach((anomaly, index) => {
      if (yPos > 250) {
        this.doc.addPage()
        yPos = 30
      }
      
      this.doc.setFontSize(12)
      this.doc.setFont('helvetica', 'bold')
      this.doc.text(`${index + 1}. ${anomaly.title}`, 20, yPos)
      yPos += 8
      
      this.doc.setFont('helvetica', 'normal')
      this.doc.text(`Severity: ${anomaly.severity.toUpperCase()}`, 25, yPos)
      yPos += 6
      this.doc.text(`Description: ${anomaly.description}`, 25, yPos)
      yPos += 6
      this.doc.text(`Time: ${new Date(anomaly.timestamp).toLocaleString()}`, 25, yPos)
      yPos += 12
    })
  }

  addRecommendations(analysisData) {
    this.doc.addPage()
    
    this.doc.setFontSize(18)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Recommendations', 20, 30)
    
    const recommendations = analysisData.recommendations || []
    
    if (recommendations.length === 0) {
      this.doc.setFontSize(12)
      this.doc.setFont('helvetica', 'normal')
      this.doc.text('No specific recommendations at this time.', 20, 50)
      return
    }
    
    let yPos = 50
    recommendations.forEach((rec, index) => {
      if (yPos > 250) {
        this.doc.addPage()
        yPos = 30
      }
      
      this.doc.setFontSize(12)
      this.doc.setFont('helvetica', 'bold')
      this.doc.text(`${index + 1}. ${rec.title}`, 20, yPos)
      yPos += 8
      
      this.doc.setFont('helvetica', 'normal')
      this.doc.text(`Priority: ${rec.priority.toUpperCase()}`, 25, yPos)
      yPos += 6
      this.doc.text(`Description: ${rec.description}`, 25, yPos)
      yPos += 12
    })
  }

  async addVisualization(visualizationElement) {
    this.doc.addPage()
    
    this.doc.setFontSize(18)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Flight Path Visualization', 20, 30)
    
    try {
      const canvas = await html2canvas(visualizationElement, {
        backgroundColor: '#ffffff',
        scale: 2
      })
      
      const imgData = canvas.toDataURL('image/png')
      const imgWidth = 170
      const imgHeight = (canvas.height * imgWidth) / canvas.width
      
      this.doc.addImage(imgData, 'PNG', 20, 50, imgWidth, imgHeight)
    } catch (error) {
      console.error('Error capturing visualization:', error)
      this.doc.setFontSize(12)
      this.doc.setFont('helvetica', 'normal')
      this.doc.text('Visualization could not be captured.', 20, 50)
    }
  }

  addTechnicalAppendix(flightData) {
    this.doc.addPage()
    
    this.doc.setFontSize(18)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Technical Appendix', 20, 30)
    
    // Technical specifications
    const techSpecs = [
      ['Parameter', 'Value'],
      ['Flight ID', flightData.flight_id],
      ['Log Format', 'MAVLink Binary'],
      ['Total Messages', `${flightData.summary.total_messages || 'N/A'}`],
      ['GPS Points', `${flightData.telemetry?.gps?.length || 0}`],
      ['Attitude Points', `${flightData.telemetry?.attitude?.length || 0}`],
      ['Battery Points', `${flightData.telemetry?.battery?.length || 0}`],
      ['Analysis Date', new Date().toISOString()],
      ['Software Version', 'UAV Log Viewer v1.0']
    ]
    
    this.addTable(techSpecs, 20, 50)
    
    // Processing notes
    let yPos = 140
    this.doc.setFontSize(14)
    this.doc.setFont('helvetica', 'bold')
    this.doc.text('Processing Notes', 20, yPos)
    yPos += 15
    
    this.doc.setFontSize(12)
    this.doc.setFont('helvetica', 'normal')
    
    const notes = [
      'GPS coordinates filtered for fix_type >= 3',
      'Anomaly detection based on ArduPilot standards',
      'Safety scoring uses weighted algorithm',
      'Battery calculations based on voltage readings'
    ]
    
    notes.forEach(note => {
      this.doc.text(`• ${note}`, 25, yPos)
      yPos += 8
    })
  }

  addTable(data, x, y) {
    const cellWidth = 50
    const cellHeight = 8
    const startX = x
    let currentY = y
    
    data.forEach((row, rowIndex) => {
      let currentX = startX
      row.forEach((cell, cellIndex) => {
        // Draw cell border
        this.doc.rect(currentX, currentY, cellWidth, cellHeight)
        
        // Set font style for headers
        if (rowIndex === 0) {
          this.doc.setFont('helvetica', 'bold')
          this.doc.setFillColor(240, 248, 255)
          this.doc.rect(currentX, currentY, cellWidth, cellHeight, 'F')
        } else {
          this.doc.setFont('helvetica', 'normal')
        }
        
        // Add text
        this.doc.text(String(cell), currentX + 2, currentY + 5)
        currentX += cellWidth
      })
      currentY += cellHeight
    })
  }

  getScoreStatus(score, maxScore) {
    const percentage = (score / maxScore) * 100
    if (percentage >= 80) return 'Excellent'
    if (percentage >= 60) return 'Good'
    if (percentage >= 40) return 'Warning'
    return 'Critical'
  }

  async downloadReport(filename = 'flight-analysis-report.pdf') {
    if (!this.doc) {
      throw new Error('No report generated')
    }
    
    this.doc.save(filename)
  }
}

export default new ReportService()